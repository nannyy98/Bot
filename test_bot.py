
#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∞–º–æ—Ç–µ—Å—Ç –ë–î –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –±–æ—Ç–∞ (Postgres).
"""
from __future__ import annotations
import logging
from dbx import scalar as db_scalar, all as db_all

def test_database() -> bool:
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
        must_tables = ["users", "categories", "products", "orders", "order_items", "cart"]
        for t in must_tables:
            db_scalar(f'SELECT COUNT(*) FROM "{t}"')
        logging.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        users = db_scalar("SELECT COUNT(*) FROM users")
        cats = db_scalar("SELECT COUNT(*) FROM categories")
        logging.info(f"üë• users={users}, üóÇ categories={cats}")

        return True
    except Exception as e:
        logging.info(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã: {e}", exc_info=True)
        return False

def main():
    ok = test_database()
    if ok:
        logging.info("\n‚úÖ –í—Å—ë –æ–∫, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞")
    else:
        logging.info("\n‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")

if __name__ == "__main__":
    main()
